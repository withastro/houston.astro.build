---
import Footer from "../components/Footer.astro";
import BaseHead, { Props as Meta } from "../components/BaseHead.astro";
import Houston from "../components/Houston.astro";
import HoustonAI from "../components/HoustonAI.astro";
import Logo from "../components/Logo.astro";
import ThumbsUp from "../components/ThumbsUp.astro";
import ThumbsDown from "../components/ThumbsDown.astro";
export const prerender = true;

const meta: Meta = {
  siteName: "HoustonAI â€¢ Astro Assistant",
  description:
    "HoustonAI is an experimental AI assistant, trained to answer questions about Astro. Powered by Astro 2.0, GPT-3, LangChain, and the Astro documentation website.",
  image: {
    src: "/social.jpg",
    alt: "Houston",
  },
};
---

<html lang="en">
  <head>
    <BaseHead {...meta} />
  </head>
  <body>
    <Logo />
    <header class="container">
      <Houston glow />
      <div class="intro">
        <div class="intro-content">
          <p class="intro-title">
            <HoustonAI />
          </p>
          <p class="intro-subtitle">
            Hi, I'm Houston! I've read the entire <a
            href="https://docs.astro.build/"
            target="_blank">Astro Docs</a
            > (a few thousand times). Ask me how to do anything in Astro. I'll do my
            best to answer!
          </p>
        </div>
      </div>
    </header>
    <main class="container">
      <ul class="chat"></ul>
    </main>
    <div class="container">
      <Footer />
    </div>
    <footer class="container">
      <form action="#" onsubmit="handleSubmit(event)">
        <div class="autogrow">
          <textarea
            id="message"
            name="message"
            onkeydown="handleKeydown(event)"
            oninput="this.parentNode.dataset.value = this.value"
            placeholder="Why should I use Astro?"
            cols="30"></textarea>
          <button type="submit">
            <svg
              width="24"
              height="24"
              viewBox="0 0 32 32"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>Send</title>
              <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M5.64161 2.18531C6.04591 2.14469 6.453 2.22818 6.80868 2.42468L6.81379 2.4275L27.9217 14.25L27.9244 14.2515C28.2358 14.4244 28.4954 14.6774 28.6764 14.9842C28.8578 15.292 28.9535 15.6427 28.9535 16C28.9535 16.3572 28.8578 16.708 28.6764 17.0157C28.4954 17.3226 28.2358 17.5756 27.9244 17.7485L27.9217 17.75L6.80869 29.5753C6.45301 29.7718 6.04591 29.8553 5.64161 29.8147C5.2373 29.774 4.85495 29.6112 4.54548 29.3479C4.236 29.0846 4.01408 28.7332 3.90925 28.3406C3.80455 27.9485 3.82162 27.5338 3.95818 27.1517L7.93379 16L3.95868 4.84968C3.82192 4.46735 3.8045 4.05166 3.90925 3.65933C4.01408 3.26675 4.236 2.9154 4.54548 2.65208C4.85496 2.38875 5.2373 2.22594 5.64161 2.18531ZM27.4376 15.125L26.9489 15.9975L5.84155 4.17529L5.84205 4.17668L9.8113 15.3106C9.98396 15.7539 9.98396 16.246 9.8113 16.6894L5.84155 27.8247L26.9489 16.0025L26.9535 16L27.4376 15.125Z"
                fill="currentColor"></path>
              <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M8 16C8 15.4477 8.44772 15 9 15H17C17.5523 15 18 15.4477 18 16C18 16.5523 17.5523 17 17 17H9C8.44772 17 8 16.5523 8 16Z"
                fill="currentColor"></path>
            </svg>
          </button>
        </div>
      </form>
    </footer>

    <template id="thumbs">
      <div class="buttons">
        <button data-action="good">
          <span><ThumbsUp /></span>
        </button>
        <button data-action="bad">
          <span><ThumbsDown /></span>
        </button>
      </div>
    </template>

    <style>
      :root {
        --container-width: 640px;
      }
      :global(*) {
        box-sizing: border-box;
      }
      body {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
          Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
          sans-serif;
        display: flex;
        flex-direction: column;
        margin: 0;
        position: relative;
        background: #17191e;
        color-scheme: dark;
        height: 100vh;
        height: 100dvh;
        line-height: 1.33;
        max-width: 100vw;
        overflow-x: hidden;
      }
      body::before {
        position: absolute;
        content: "";
        mix-blend-mode: overlay;
        opacity: 0.4;
        inset: 0;
        width: 100%;
        height: 100%;
        background: url(/whitenoise.png);
        background-repeat: repeat;
        pointer-events: none;
      }
      @font-face {
        font-family: "MD IO 0.5";
        src: url("https://fonts-cdn.astro.build/MD IO/Web/MDIO0.5-Regular.woff2")
          format("woff2");
        font-weight: 400;
        font-style: normal;
        font-display: swap;
      }
      a {
        color: rgba(255, 255, 255, 0.8);
      }
      .container {
        width: 100%;
        max-width: var(--container-width);
        margin-left: auto;
        margin-right: auto;
      }
      header {
        position: relative;
        margin: 0.75rem;
        padding: 0.75rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 0;
      }
      header.inactive .intro {
        display: none;
        opacity: 0;
        pointer-events: none;
        user-select: none;
      }
      .intro {
        max-width: 100%;
        color: white;
        transition: opacity 500ms ease-out;
        text-align: left;
      }
      .intro .intro-content {
        max-width: 400px;
      }
      .intro .intro-title {
        margin: 2rem 0 0 0;
        padding: 1rem 4rem;
        font-size: 2rem;
        display: inline-flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        gap: 8px;
        justify-content: space-between;
      }
      .intro .intro-subtitle {
        margin: 0.25rem 0 1rem 0;
        color: rgba(133, 139, 152, 1);
        text-align: left;
        font-size: 1.3rem;
        padding: 0 0.5rem;
      }
      .learn-more-button {
        background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
        padding: 8px 12px;
        font-weight: bold;
      }
      main {
        padding-left: 1rem;
        padding-right: 1rem;
        padding-bottom: 2rem;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        gap: 1rem;
        overflow-y: auto;
      }
      footer {
        display: flex;
        flex-flow: column;
        position: relative;
      }

      footer button {
        position: absolute;
        right: 19px;
        top: 19px;
        --size: 2.5rem;
        width: var(--size);
        height: var(--size);
        border-radius: 50%;
        border: 0;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      footer svg {
        margin-right: -0.25rem;
      }

      .autogrow {
        display: grid;
        overflow-y: scroll;
        padding-left: 1px;
      }
      .autogrow::-webkit-scrollbar {
        display: none;
      }
      .autogrow > textarea {
        resize: none;
        width: 100vw;
        height: 100px;
        max-width: var(--container-width);
        outline: 0;
        flex-grow: 1;
        padding: 1rem;
        padding-right: 68px;
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
          Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
          sans-serif;
        font-size: 1.25rem;
        line-height: 1;
        border: 1px solid #343841;
        border-bottom: 0;
        margin-left: -1px;
        margin-right: -1px;

        background: #23262d;
        color: #bfc1c9;

        /* Place on top of each other */
        grid-area: 1 / 1 / 2 / 2;
      }
      .autogrow > textarea:focus {
        border-color: white;
      }

      button[type="submit"] {
        background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
      }

      button {
        --size: 2rem;
        width: var(--size);
        height: var(--size);
        border: 0;
        background: transparent;
        margin: 0;
        padding: 0;
        color: rgb(255 255 255 / 60%);
      }

      button:hover {
        color: rgb(255 255 255 / 100%);
      }

      button.fill {
        background: rgb(255 255 255 / 100%);
        border-radius: 100%;
        color: #17191e;
      }

      .chat {
        margin-top: 1rem;
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 1rem;
        list-style: none;
        padding: 0;
        margin: 0;
      }
    </style>

    <style is:global>
      ::selection {
        background: #4af2c8;
        color: #17191e;
      }
      hey-houston {
        z-index: 2;
      }
      code {
        padding: 0.125em 0.33em;
        border-radius: 0.33em;
        font-size: inherit;
        background: rgba(255 255 255 / 10%);
      }
      .chat pre,
      .chat code {
        background: rgba(255 255 255 / 0.1);
      }
      .chat pre > code {
        padding: 0;
        border-radius: 0;
        background: none;
      }
      .chat pre {
        padding: 1rem 1.5rem;
        margin-left: -1.5rem;
        margin-right: -1.5rem;
        max-width: calc(100% + 3rem);
        overflow-x: auto;
      }
      .chat > .message {
        --radius: 1.75rem;
        position: relative;
        border-radius: var(--radius);
        grid-column: span 6 / -1;
        padding: 1rem 1.5rem;
        animation: fade-in 300ms ease-out forwards;
      }
      .chat > .message::after {
        --size: 1rem;
        content: "";
        position: absolute;
        bottom: 0;
        height: var(--size);
        width: var(--size);
        z-index: 2;
      }
      .chat > .message[data-user] {
        background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
        border-bottom-right-radius: 0;
        color: white;
      }
      .chat > .message[data-user]::after {
        background: #bc52ee;
        right: calc(var(--size) * -1);
        border-bottom-right-radius: 8rem;
        background: radial-gradient(
          circle at top right,
          rgba(0, 0, 0, 0) 0,
          rgba(0, 0, 0, 0) var(--size),
          #bc52ee var(--size)
        );
      }
      .chat > .message:not([data-user])::after {
        border-top-left-radius: var(--size);
        border-bottom-left-radius: 8rem;
        background: radial-gradient(
          circle at top left,
          rgba(0, 0, 0, 0) 0,
          rgba(0, 0, 0, 0) var(--size),
          #d6d8e2 var(--size)
        );
        left: calc(var(--size) * -1);
      }
      .chat > .message:not([data-user]) {
        background: linear-gradient(180deg, #ffffff, #d6d8e2);
        border-bottom-left-radius: 0;
        grid-column: 1 / -1;
      }
      .chat > .message:not([data-user]) code {
        background: rgba(0 0 0 / 0.075);
      }
      .message a {
        color: #3245ff;
      }
      .message a:where(:visited) {
        color: #bc52ee;
      }
      .heading {
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      .heading svg {
        --size: 24px;
        width: var(--size);
        height: var(--size);
      }
      .sources {
        position: relative;
        grid-column: 1 / -1;
        margin-top: 0;
        font-size: 0.9rem;
        display: flex;
        flex-flow: column;
        gap: 0.33em;
        padding: 1rem 1.5rem;
        color: rgba(255, 255, 255, 0.8);
        font-family: "MD IO 0.5", system-ui, -apple-system, BlinkMacSystemFont;
      }
      .sources::before,
      .sources::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }
      .sources::before {
        z-index: -1;
        background: #17191e;
        top: 2px;
        right: 2px;
        bottom: 2px;
        left: 2px;
      }
      .sources::after {
        z-index: -2;
        background: linear-gradient(247.23deg, #4af2c8 0%, #2f4cb3 100%);
      }
      .sources h5 {
        margin: 1rem -1.5rem -1rem;
        padding: 1rem 1.5rem;
        background: linear-gradient(
          to bottom,
          rgba(255, 255, 255, 0.1) 0%,
          rgba(255, 255, 255, 0) 200%
        );
        font-size: 0.9rem;
        font-weight: normal;
        color: white;
      }

      .sources h2 {
        margin: 0.5rem 0 0.25rem 0;
        color: white;
      }
      .sources > a {
        display: block;
        color: rgba(255, 255, 255, 0.8);
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
      }
      .sources > h5 > a {
        color: white;
      }
      .sources > a::before {
        content: "> ";
        display: inline-block;
        margin-right: 8px;
        opacity: 0.4;
      }
      .sources > a:hover::before {
        opacity: 0.5;
      }
      .sources > a:is(:hover, :focus) {
        color: rgba(255, 255, 255, 1);
      }
      @keyframes fade-in {
        from {
          opacity: 0;
          transform: translateY(1rem);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      @keyframes shake {
        0% {
          transform: translateX(0);
        }
        25% {
          transform: translateX(0.75rem);
        }
        50% {
          transform: translateX(-0.75rem);
        }
        75% {
          transform: translateX(0.75rem);
        }
        100% {
          transform: translateX(0);
        }
      }

      @media (min-width: 640px) {
        .chat > .message {
          grid-column: span 5 / -1;
        }
        .autogrow > textarea {
          border-top-right-radius: 12px;
          border-top-left-radius: 12px;
        }
      }
    </style>

    <script>
      import { makeAskRequest, makeVoteRequest, markdown } from "../util";

      const header = document.querySelector("header")!;
      const houston = document.querySelector("hey-houston")!;

      const h = (
        tag: string,
        props: Record<string, any> = {},
        ...children: any[]
      ) => {
        const node = document.createElement(tag);
        for (const [key, value] of Object.entries(props)) {
          node.setAttribute(key, value);
        }
        for (const child of children) {
          if (child instanceof Node) {
            node.appendChild(child);
          } else if (child || child === 0) {
            node.innerHTML = child;
          }
        }
        return node;
      };

      const messages = document.querySelector(".chat") as HTMLDivElement;

      async function handleSubmit(event: Event) {
        event.preventDefault();
        if (houston.classList.contains("loading")) {
          return;
        }
        const form = event.target as HTMLFormElement;
        const textarea = form.message as HTMLTextAreaElement;
        let message = textarea.value;
        if (!message.trim()) {
          if (textarea.placeholder === "Why should I use Astro?") {
            message = textarea.placeholder;
            textarea.placeholder = "How does routing work?";
          } else if (
            textarea.placeholder === "How does routing work in Astro?"
          ) {
            message = textarea.placeholder;
            textarea.placeholder = "Ask another question...";
          } else {
            return;
          }
        }

        const bubble = h(
          "li",
          { class: "message", "data-user": "" },
          markdown(message)
        );
        messages.appendChild(bubble);
        bubble.scrollIntoView();
        header.classList.add("inactive");

        textarea.value = "";
        textarea.blur();

        const thinking = houston.think();
        let emote: string = "default";
        try {
          const delay = new Promise((r) => setTimeout(r, 3200));
          const res = await makeAskRequest(message);
          await delay;
          emote = res.valid ? "haapy" : "disappointed";

          if (!res.valid) {
            const bubble = h(
              "li",
              { class: "sources" },
              `I don't know. Sorry!`
            );
            messages.appendChild(bubble);
            bubble.scrollIntoView();
          } else {
            const sources: any[] = res.sources
              .reduce(
                (arr, item) =>
                  arr.some((_item) => _item.title === item.title)
                    ? arr
                    : [...arr, item],
                []
              )
              .map(({ url, title }) =>
                h("a", { target: "_blank", href: url }, title)
              );
            const heading = h(
              "div",
              { class: "heading" },
              h("h2", {}, "Answer"),
              (
                document.querySelector("#thumbs")! as HTMLTemplateElement
              ).content.cloneNode(true)
            );
            let voted = false;
            heading.addEventListener("click", (e) => {
              if (voted === true) return;
              const target = (e.target as HTMLElement)?.closest(
                "[data-action]"
              ) as HTMLElement;
              if (!target) return;
              target.classList.add("fill");
              const action = target.dataset.action as "good" | "bad";
              voted = true;
              makeVoteRequest(
                action === "good" ? 1 : 0,
                message,
                res.answer,
                res.sources
              );
            });
            const bubble = h(
              "li",
              { class: "sources" },
              heading,
              h("span", {}, markdown(res.answer))
            );
            messages.appendChild(bubble);

            if (sources.length > 0) {
              bubble.appendChild(h("h2", {}, "Resources"));
              sources.forEach((s) => bubble.appendChild(s));
            }

            bubble.appendChild(
              h(
                "h5",
                {},
                h("strong", {}, `Warning: Not all answers are correct!`)
              )
            );
            bubble.scrollIntoView();

            // const footer = document.querySelector(".footer")! as HTMLDivElement;
            // const footerLinks = footer.querySelector(".links") as HTMLDivElement;
          }
        } catch (err) {
          console.error(err);
          const status = err.cause;
          if (status == 400) {
            emote = "disappointed";
            const bubble = h(
              "li",
              { class: "sources" },
              `I am unable to respond to content like this.`
            );
            messages.appendChild(bubble);
            bubble.scrollIntoView();
          } else {
            emote = "disappointed";
            const bubble = h(
              "li",
              { class: "sources" },
              `Something went wrong! Please try again.`
            );
            messages.appendChild(bubble);
            bubble.scrollIntoView();
          }
        } finally {
          thinking.stop();
          houston.emote(emote);
          setTimeout(() => houston.emote("default"), 1250);
        }
      }

      function handleKeydown(event: KeyboardEvent) {
        if (event.shiftKey) return;
        if (event.key !== "Enter") return;
        event.preventDefault();
        (event.target as HTMLElement).closest("form")!.requestSubmit();
      }

      globalThis.handleSubmit = handleSubmit;
      globalThis.handleKeydown = handleKeydown;
    </script>
  </body>
</html>
